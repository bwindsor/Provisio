#!/bin/bash

# exit immediately if something fails
set -e


if ! [ $(id -u) = 0 ]; then
   echo "ERROR: provisio must run under root or sudo"
   exit 1
fi

#
# NB: $BASE directory may exist on a shared host drive
#     but $SCRATCH always exists inside an image
#

PROVISIOFILE="Provisiofile"
BASE=$(pwd)/.provisio
DIGEST=$(echo -n $(pwd) | md5sum | awk '{print $1}')
SCRATCH=/var/log/provisio/$DIGEST



mkdir -p $SCRATCH
mkdir -p $BASE
mkdir -p $BASE/rpm-keys
mkdir -p $BASE/docker-images
if [ ! -f $BASE/manifest ]; then
    touch $BASE/manifest
fi

case "$1" in

  include)
    cwd=$(pwd)
    cd $2
    provisio up
    cd $cwd
  ;;

  env)
    if [ "$#" -ne 2 ]; then
        printenv | grep -E '^[a-z][a-z_]+=.*$'
    else
        printenv | grep -E '^[a-z][a-z_]+=.*$' | grep $2
    fi
  ;;

  host)

    cat <<EOF > /etc/hosts
127.0.0.1   $2.local localhost localhost4 localhost.localdomain
EOF

    cat <<EOF > /etc/sysconfig/network
NETWORKING=yes
NETWORKING_IPV6=no
HOSTNAME=$2.local
NOZEROCONF=true
GATEWAYDEV=$3
EOF

    # overwriting is a bit unfriendly, but safe and makes indempotent 
    cat <<EOF > /etc/sysctl.conf
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.lo.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1
EOF

    source /etc/sysconfig/network-scripts/ifcfg-$3
    cat <<EOF > /etc/sysconfig/network-scripts/ifcfg-$3
DEVICE=$DEVICE
HWADDR=$HWADDR
TYPE=Ethernet
UUID=$UUID
ONBOOT=yes
NM_CONTROLLED=yes
BOOTPROTO=dhcp
NETWORKING_IPV6=no
IPV6INIT=no
USERCTL=no
PEERDNS=yes
EOF

  ifdown $3
  ifup $3

  ;;

  install)

    pkg=$2
    app=$3
    tag="$2 $3"

    case "$pkg" in

    yum)
        mkdir -p $BASE/yum

        if [ -e /var/run/yum.pid ]; then
            # cannot run yum recursively...can we run yum list recursively?
            # if yum list installed $app; then
            #     # probably okay since already installed
            #     echo "WARNING: Cannot run yum recursively but $app is already installed"
            #     :
            # else
            #     echo "ERROR: Cannot run yum recursively and $app not already installed"
            #     exit 1
            # fi

            # fail silently and hope for the best!
            exit 0
        fi

        cp /etc/yum.conf /etc/yum.conf.bak
        sed -i "s/keepcache=0/keepcache=1/" /etc/yum.conf
        sed -i "s@cachedir=.*@cachedir=$BASE/yum/repo@" /etc/yum.conf

        if grep -Fxq $tag $BASE/manifest  
        then
            yum -y -C install $app
        else
            yum -y install $app
            echo $tag >> $BASE/manifest    
        fi

        cp -f /etc/yum.conf.bak /etc/yum.conf

      ;;

    yum-group)
        mkdir -p $BASE/yum

        cp /etc/yum.conf /etc/yum.conf.bak
        sed -i "s/keepcache=0/keepcache=1/" /etc/yum.conf
        sed -i "s@cachedir=.*@cachedir=$BASE/yum/repo@" /etc/yum.conf

        if grep -Fxq $tag $BASE/manifest  
        then
            yum -y -C groupinstall "$app"
        else
            yum -y groupinstall "$app"
            echo $tag >> $BASE/manifest    
        fi

        cp -f /etc/yum.conf.bak /etc/yum.conf

      ;;


    pip)
        mkdir -p $BASE/pip
        if command -v pip >/dev/null 2>&1
        then
            :
        else
            provisio download https://bootstrap.pypa.io/get-pip.py
            python /tmp/get-pip.py
            rm /tmp/get-pip.py
        fi

        if [ ! -d ~/.provisio-pip ]; then
            mkdir ~/.provisio-pip
        fi

        # pip --cache-dir $BASE/pip install $2

        if grep -Fxq $tag $BASE/manifest  
        then
            # dont attempt to sync in case read-only
            cp -fR $BASE/pip/* ~/.provisio-pip/ | true
            pip --cache-dir ~/.provisio-pip install $app
        else
            cp -fR $BASE/pip/* ~/.provisio-pip/ | true
            pip --cache-dir ~/.provisio-pip install $app
            cp -fR ~/.provisio-pip/* $BASE/pip/
            echo $tag >> $BASE/manifest
        fi
        
       ;;

    npm)
        mkdir -p $BASE/npm

        if command -v npm >/dev/null 2>&1
        then
            :
        else
            provisio install yum npm
        fi

        if [ -z $app ]; then
            cp -fR $BASE/npm/* ~/.npm/ | true
            npm install --no-bin-links
            cp -fR ~/.npm/* $BASE/npm/
            for directory in ~/.npm/*/ ; do
                if grep -Fxq "npm $directory" $BASE/manifest
                then
                    :
                else
                    echo "npm $directory" >> $BASE/manifest    
                fi
            done
        else
            if grep -Fxq $tag $BASE/manifest  
            then
                # dont attempt to sync in case read-only
                cp -fR $BASE/npm/* ~/.npm/ | true
                npm install $app
            else
                cp -fR $BASE/npm/* ~/.npm/ | true
                npm install $app
                cp -fR ~/.npm/* $BASE/npm/
                echo $tag >> $BASE/manifest    
            fi
        fi

       ;;

    npm-global)
        mkdir -p $BASE/npm

        if command -v npm >/dev/null 2>&1
        then
            :
        else
            provisio install yum npm
        fi

        if grep -Fxq $tag $BASE/manifest  
        then
            # dont attempt to sync in case read-only
            cp -fR $BASE/npm/* ~/.npm/ | true
            npm install -g $app
        else
            cp -fR $BASE/npm/* ~/.npm/ | true
            npm install -g $app
            cp -fR ~/.npm/* $BASE/npm/
            echo $tag >> $BASE/manifest    
        fi
        
    ;;


    rpm)
        url=$3
        file=$(basename "$url")
        provisio download $url
        rpm -ivh --replacepkgs /tmp/$file
    ;;

    rpm-key)
        url=$4
        if grep -Fxq "import $app" $BASE/manifest  
        then
            rpm --import $BASE/rpm-keys/$app
        else
            curl -o $BASE/rpm-keys/$app "$url"
            cat $BASE/rpm-keys/$app
            echo "import $app" >> $BASE/manifest
            rpm --import $BASE/rpm-keys/$app
        fi
    ;;

    docker)
        if command -v docker >/dev/null 2>&1
        then
            :
        else
            provisio install docker
            systemctl start docker
            systemctl enable docker
        fi

        image=${app/":"/"-DOCKERCOLON-"}
        image=${image/"/"/"-DOCKERFS-"}
        if [ ! -f "${BASE}/docker-images/${image}.tar" ]
        then
            echo "docker $app" >> "${BASE}/manifest"
            docker pull $app
            docker save $app > "${BASE}/docker-images/${image}.tar"
        else
            docker load -i "${BASE}/docker-images/${image}.tar"
        fi
          ;;

    # Special cases...

    jdk)

        jver=${3:-"7u55-b13/jdk-7u55-linux-x64"}
        jurl="http://download.oracle.com/otn-pub/java/jdk/${jver}"
        file=$(basename "$jurl")

        if command -v wget >/dev/null 2>&1
        then
            :
        else
            provisio install wget
        fi

        if command -v rpm >/dev/null 2>&1
        then

            if [ ! -f "$BASE/download/$file.rpm" ]; then
                echo "jdk $jver" >> $BASE/manifest    
            fi
            wget -q -P $BASE/download --no-cookies --no-check-certificate --header "Cookie: oraclelicense=accept-securebackup-cookie" "${jurl}.rpm"
            rpm -ivh $BASE/download/$file.rpm

        else

            if [ ! -f "$BASE/download/$file.tar.gz" ]; then
                echo "jdk $jver" >> $BASE/manifest    
            fi

            wget -q -P $BASE/download --no-cookies --no-check-certificate --header "Cookie: oraclelicense=accept-securebackup-cookie" "${jurl}.tar.gz"
            tar xzf $BASE/download/$file.tar.gz -C /tmp/
            rsync -a /tmp/jdk*/ /usr/local/

        fi
    ;;


    # Perhaps we were just given a package, assume an OS install and try to infer manager
    *)

        
        if command -v yum >/dev/null 2>&1
        then
            provisio install yum $2
        elif command -v rpm >/dev/null 2>&1
        then
            provisio install rpm $2
        elif command -v apt-get >/dev/null 2>&1
        then
            provisio install apt $2
        else
            echo "ERROR: unknown package manager $2 and cannot infer platform's package manager to install package $2"
            exit 1
        fi


    ;;

      esac
    ;;



  touch)
    path=$2
    if grep -Fxq "touch $path" $BASE/manifest  
    then
        :
    else
        echo "touch $path" >> $BASE/manifest        
    fi
    echo -n $path
  ;;


  unpack)

    cp /etc/yum.conf /etc/yum.conf.bak
    sed -i "s/keepcache=0/keepcache=1/" /etc/yum.conf
    sed -i "s@cachedir=.*@cachedir=$BASE/yum/repo@" /etc/yum.conf
    yum -y -C install $2  
    cp -f /etc/yum.conf.bak /etc/yum.conf

  ;;

  pack)
    env=$2

    mkdir -p .rpm
    rm -Rf .rpm/*

    pushd .rpm
        mkdir BUILD RPMS SOURCES SPECS SRPMS ROOT
    popd

    NAME="Unnamed"
    SUMMARY="This package has no summary"
    DESCRIPTION="This package has no description"
    LICENSE="Public domain"
    VERSION=0
    RELEASE=0
    INCLUDE=""
    if [ -e Packfile ]; then
        source Packfile
    fi


    cat <<EOF > .rpm/SPECS/pack.spec
%define _topdir .rpm 
%define _unpackaged_files_terminate_build 0

BuildRoot:      .rpm/ROOT
Summary:        $SUMMARY
License:        $LICENSE
Name:           $NAME
Version:        $VERSION
Release:        $RELEASE
Source:         $NAME-$VERSION.tar.gz
Prefix:         /usr
Group:          Development/Tools
Requires:       perl
Requires:       python-pip
EOF

    for pkg in $(grep "^yum" .provisio/manifest | cut -d' ' -f2); do
        echo "Requires:       $pkg" >> .rpm/SPECS/pack.spec
    done

    cat <<EOF >> .rpm/SPECS/pack.spec
%description
$DESCRIPTION

%prep


%build

 
%install
mkdir -p %{buildroot}/tmp/$DIGEST/.provisio
cp -Rf $BASE/* %{buildroot}/tmp/$DIGEST/.provisio/
cp -f $BASE/../Provisiofile %{buildroot}/tmp/$DIGEST/

if [ -e "$BASE/../$env" ]; then
    set -a    
    source "$BASE/../$env"
    set +a
fi
printenv | grep -E '^[a-z_][a-z_]+=.*$' > %{buildroot}/tmp/$DIGEST/environment.env

mkdir -p %{buildroot}/usr/bin
cp /usr/bin/provisio %{buildroot}/usr/bin/provisio
chmod 755 %{buildroot}/usr/bin/provisio

for i in $INCLUDE; do
    echo "Including \$i..."
    if [ -d $BASE/../\$i ]; then
        cp -Rf $BASE/../\$i %{buildroot}/tmp/$DIGEST/
    else
        cp -f $BASE/../\$i %{buildroot}/tmp/$DIGEST/
    fi
done

# Build a manifest of the RPM's directory hierarchy.
echo "%%defattr(-, root, root)" > MANIFEST
(cd %{buildroot}; find . -type f -or -type l | sed -e s/^.// -e /^$/d) >> MANIFEST

%files -f MANIFEST

%pre

%post

# rm -f /var/run/yum.pid
# rm -f /var/lib/rpm/.rpm.lock
pushd /tmp/$DIGEST
    provisio up environment.env
popd
rm -Rf /tmp/$DIGEST

%preun
echo "WARNING: uninstalling is not currently supported"

%postun
echo "WARNING: uninstalling is not currently supported"

EOF

yum -yq install rpm-build
# rpmbuild -v -bb --clean --buildroot=$PWD/.rpm/ROOT .rpm/SPECS/pack.spec
rpmbuild -v -bb --clean .rpm/SPECS/pack.spec
cp .rpm/RPMS/x86_64/*.rpm .


#### rpm -i --force .rpm/hyperbroker-0.1/RPMS/x86_64/hyperbroker-0.1-1.x86_64.rpm


  ;;

  download)

    if command -v wget >/dev/null 2>&1
    then
        :
    else
        provisio install wget
    fi

    file=$(basename "$2")
    if [ ! -f $BASE/download/$file ]; then
        echo "download $2" >> $BASE/manifest    
    fi
    wget -q -nc -P $BASE/download $2
    cp $BASE/download/$file /tmp/$file
      ;;


  set)
    if grep -q "$2=" $4
    then
        sed -i "s|^$2=.*|$2=$3|" $4
    else
        echo "$2=$3" >> $4
    fi
    
  ;;

  get)
    awk -F\= "\$1==\"$2\"{gsub(/\"/,\"\",\$2); print \$2}" $3
  ;;

  cat)
    # log interpolation for debugging
    perl -pe 's/\{\{(.*?)\}\}/$ENV{$1}/g' $2 >&2
    perl -pe 's/\{\{(.*?)\}\}/$ENV{$1}/g' $2
    ;;


  logs)

    if [ ! -z "$2" ]; then
        if [ -f $SCRATCH/$2.log ]; then
            cat $SCRATCH/$2.log
        fi
    else
        for i in $(ls -tr $SCRATCH/*.log) 
        do 
            nm=$(basename $i | cut -f 1 -d '.')
            echo -------------------------------------------------
            echo $nm
            echo ------------------------------------------------- 
            cat $SCRATCH/$nm.log
        done
    fi

    ;;

  clean)

    rm -Rf $SCRATCH/
    if [ "all" == "$2" ]; then
        rm -Rf /var/log/provisio/
    fi

    if [ "cache" == "$2" ]; then
        rm -Rf $BASE/
    fi

    ;;

  update)

      curl -s -o $0 https://raw.githubusercontent.com/chmcewan/Provisio/master/provisio

    ;;

  pull)
    name=$2
    env=$3
    force=
      
    if [ "$name" == "-f" ]; then
        name=$3
        env=$4 
        force=1           
    fi
    
    org=$(echo -n $name | sed 's@/.*@@')
    repo=$(echo -n $name | sed 's@.*/@@')

    if command -v git >/dev/null 2>&1
    then
        :
    else
        provisio install yum git
    fi


    mkdir -p $BASE/git
    if [ ! -d $BASE/git/$repo ]; then
        pushd $BASE/git
        git clone https://github.com/$org/$repo
        popd
        echo "git $name" >> $BASE/manifest
    fi 

    pushd $BASE/git/$repo
        if [ ! -z "$force" ]; then
            git pull https://github.com/$org/$repo
        fi
        if [ -e ./Provisiofile ]; then
            provisio up $env
        fi
    popd


    ;;

  up)

    if [ ! -f ./$PROVISIOFILE ]; then
        echo "ERROR: No '$PROVISIOFILE' found in current directory!"
        exit 1
    fi

    if [ ! -z "$2" ]; then
        # import environmental variables
        set -a
        source $2
        set +a
    fi

    
    cp ./$PROVISIOFILE $SCRATCH/$PROVISIOFILE.sh


    export SCRATCHDIR=$SCRATCH

    # complex tasks
    perl -0777 -pi -e 's|#task\h+(\S+)\h+(\S+)\h+if\h+(\S+)(.*?)#end|if [ ! -z "\$$3" ]; then\n#task $1 $2\n$4\n#end\nelse\nprintf "%-50s[\e[31mignored\e[39m]\n" "$1"\nfi\n|sg' $SCRATCH/$PROVISIOFILE.sh 
    perl -0777 -pi -e 's|#task\h+(\S+)\h+(\S+)\h+unless\h+(\S+)(.*?)#end|if [ -z "\$$3" ]; then\n#task $1 $2\n$4\n#end\nelse\nprintf "%-50s[\e[31mignored\e[39m]\n" "$1"\nfi\n|sg' $SCRATCH/$PROVISIOFILE.sh 


    # primitive tasks
    perl -0777 -pi -e 's|#task\h+(\S+)\h+never(.*?)#end|printf "%-50s[\e[31mignored\e[39m]\n" "$1"|sg' $SCRATCH/$PROVISIOFILE.sh 
    perl -0777 -pi -e 's|#task\h+(\S+)\h+once(.*?)#end|if [ ! -f $ENV{SCRATCHDIR}/$1.success ]; then\nexec 3>&1 4>&2 1>$ENV{SCRATCHDIR}/$1.log 2>&1\nset -e\ntrap "{ exec 1>&3 2>&4; echo \"\e[31m\"; tail $ENV{SCRATCHDIR}/$1.log ; echo \"\e[39m\"; exit 1; }" EXIT\n$2\ntrap - EXIT\ntouch $ENV{SCRATCHDIR}/$1.success\nexec 1>&3 2>&4\nset +e\nprintf "%-50s[\e[32msuccess\e[39m]\n" "$1"\nelse\nprintf "%-50s[skipped]\n" "$1"\nfi|sg' $SCRATCH/$PROVISIOFILE.sh 
    perl -0777 -pi -e 's|#task\h+(\S+)\h+always(.*?)#end|exec 3>&1 4>&2 1>$ENV{SCRATCHDIR}/$1.log 2>&1\nset -e\ntrap "{ exec 1>&3 2>&4; echo \"\e[31m\"; tail $ENV{SCRATCHDIR}/$1.log ; echo \"\e[39m\";  exit 1; }" EXIT\n$2\ntrap - EXIT\ntouch $ENV{SCRATCHDIR}/$1.success\nexec 1>&3 2>&4\nset +e\nprintf "%-50s[\e[32msuccess\e[39m]\n" "$1"|sg' $SCRATCH/$PROVISIOFILE.sh    


    SCRATCHDIR=$SCRATCH bash $SCRATCH/$PROVISIOFILE.sh
    
    ;;

  *)
    echo ""
    echo "Usage: provisio up [environment]"
    echo ""
    echo "       provisio download <URL>"    
    echo "       provisio install [ yum | apt | rpm | pip | npm | npm-global ] <package>"
    echo "       provisio install jdk [version]"  
    echo "       provisio pull <org>/<repo> [environment]"       
    echo ""
    echo "       provisio set <key> <value> <file>"
    echo "       provisio get <key> <file>"    
    echo "       provisio cat <template>"
    echo "       provisio env [filter]"        
    echo ""
    echo "       provisio logs [task]"
    echo "       provisio clean [ all | cache ]"  
    echo "       provisio update"        
    echo ""

    exit 1
    ;;
esac

exit $?
